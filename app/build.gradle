plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

// NO FREE
if (!project.hasProperty('free')) {
    // Firebase
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
    apply plugin: 'com.google.firebase.firebase-perf'
}

android {
    compileSdkVersion 31

    defaultConfig {
        applicationId "net.xzos.upgradeall"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 97
        versionName "0.13-alpha"
        if (project.hasProperty('appVerName')) {
            versionName = "${versionName}_${appVerName}"
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
                arg("room.incremental", "true")
            }
        }
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [enableCrashReporting: "true", appName: "UpgradeAll"]
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    output.outputFileName = "UpgradeAll_${versionName}.apk"
                }
            }
        }
        debug {
            minifyEnabled false
            manifestPlaceholders = [enableCrashReporting: "false", appName: "UpgradeAll-β"]
            applicationIdSuffix ".debug"
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs = ["-Xopt-in=kotlin.RequiresOptIn", "-XXLanguage:+InlineClasses"]
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }

    buildFeatures {
        // 视图绑定
        compose true
        dataBinding true
        viewBinding true
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/**', 'kotlin/**', 'org/**']
        }
        resources {
            excludes += ['META-INF/**', 'kotlin/**', 'org/**', '**.properties', '**.bin']
        }
    }


    dependenciesInfo.includeInApk false
    lint {
        abortOnError true
        checkReleaseBuilds false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0-beta01'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation "androidx.drawerlayout:drawerlayout:1.1.1"
    implementation 'androidx.viewpager2:viewpager2:1.1.0-beta01'

    implementation "androidx.activity:activity-ktx:1.4.0"
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.2'

    // Kotlin
    implementation 'androidx.core:core-ktx:1.9.0-alpha03'
    //noinspection DifferentStdlibGradleVersion
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'
    // core library desugaring
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    // Java desugar
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.4.0'

    // WorkManager
    def work_version = '2.7.1'
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // Localization
    implementation 'com.akexorcist:localization:1.2.11'

    // 数据处理
    implementation 'com.jonathanfinerty.once:once:1.3.1'

    // 图片加载
    implementation 'com.github.bumptech.glide:glide:4.13.1'
    kapt 'com.github.bumptech.glide:compiler:4.13.1'

    // 界面设计
    // Google MD 库
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.github.kobakei:MaterialFabSpeedDial:2.0.0'
    // svg 单个 path 颜色切换
    implementation 'com.github.devsideal:VectorChildFinder:1.0.0'
    implementation 'dev.rikka.rikkax.insets:insets:1.2.0'
    implementation 'dev.rikka.rikkax.layoutinflater:layoutinflater:1.2.0'

    // Jetpack Compose
    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.4.0'
    // Compose Material Design
    implementation 'androidx.compose.material:material:1.2.0-alpha07'
    // Animations
    implementation 'androidx.compose.animation:animation:1.1.1'
    // Tooling support (Previews, etc.)
    implementation 'androidx.compose.ui:ui-tooling:1.1.1'
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.0-beta01'
    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.1.1'
    // Compose Theme Adapter
    implementation "com.google.accompanist:accompanist-appcompat-theme:0.24.6-alpha"

    //RecyclerView
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.7'

    // 日历
    implementation 'com.github.6tail:lunar-java:1.2.22'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation project(path: ':app-backup')
    implementation project(path: ':core-android-utils')
    implementation project(path: ':core')
    implementation project(path: ':core-utils')
    implementation project(path: ':core-downloader')
    implementation project(path: ':core-installer')

    // NO FREE
    if (!project.hasProperty('free')) {
        // Firebase
        implementation 'com.google.firebase:firebase-perf:20.0.6'
        implementation 'com.google.firebase:firebase-analytics:20.1.2'
        implementation 'com.google.firebase:firebase-crashlytics:18.2.10'
    }
}

def optimizeReleaseRes = task('optimizeReleaseRes').doLast {
    def aapt2 = Paths.get(project.android.sdkDirectory.path, 'build-tools', project.android.buildToolsVersion, 'aapt2')
    def zip = Paths.get(
            project.buildDir.path,
            "intermediates",
            "optimized_processed_res",
            "release",
            "resources-release-optimize.ap_"
    )
    def optimized = new File("${zip}.opt")
    def cmd = exec {
        commandLine aapt2, 'optimize', '--collapse-resource-names',
                '-o', optimized, zip
        ignoreExitValue false
    }
    if (cmd.exitValue == 0) {
        delete(zip)
        optimized.renameTo("$zip")
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'optimizeReleaseResources') {
        task.finalizedBy optimizeReleaseRes
    }
}
